/*
 * Unless otherwise specified through the '@author' tag or comments at
 * the top of the file or on a specific portion of the code the following license applies:
 *
 * Copyright (c) 2014, DoubleDoorDevelopment
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 *  The header specified or the above copyright notice, this list of conditions
 *   and the following disclaimer below must be displayed at the top of the source code
 *   of any web page received while using any part of the service this software provides.
 *
 *   The header to be displayed:
 *       This page was generated by DoubleDoorDevelopment's D3Backend or a derivative thereof.
 *
 *  Neither the name of the project nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

package net.doubledoordev.backend.web.http;

import net.doubledoordev.backend.Main;
import net.doubledoordev.backend.permissions.Group;
import net.doubledoordev.backend.permissions.User;
import net.doubledoordev.backend.util.Constants;
import net.doubledoordev.backend.util.PasswordHash;
import net.doubledoordev.backend.util.Settings;
import org.glassfish.grizzly.http.server.Request;
import org.glassfish.grizzly.http.server.Response;
import org.glassfish.grizzly.http.util.Parameters;

import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.HashMap;
import java.util.Set;

/**
 * @author Dries007
 *         <p/>
 *         todo: New server!!
 */
public class PostHandler
{
    public static final PostHandler POST_HANDLER = new PostHandler();
    private static final String LOGIN         = "/login";
    private static final String REGISTER      = "/register";
    private static final String USERNAME      = "username";
    private static final String PASSWORD      = "password";
    private static final String OLD_PASSWORD  = "oldPassword";
    private static final String NEW_PASSWORD  = "newPassword";
    private static final String ARE_YOU_HUMAN = "areyouhuman";

    private PostHandler()
    {
    }

    public String handle(HashMap<String, Object> data, String uri, Request request, Response response) throws Exception
    {
        try
        {
            switch (uri)
            {
                case LOGIN:
                    return doLogin(uri, request, response);
                case REGISTER:
                    return doRegister(uri, request, response);
            }
        }
        catch (PostException e)
        {
            data.put("message", e.getLocalizedMessage());
        }
        return uri;
    }

    private String doRegister(String uri, Request request, Response response) throws PostException
    {
        Parameters parameters = request.getParameters();
        Set<String> names = request.getParameterNames();

        if (names.contains(USERNAME) && names.contains(PASSWORD) && names.contains(ARE_YOU_HUMAN))
        {
            String username = parameters.getParameter(USERNAME);
            boolean admin = Main.adminKey != null && parameters.getParameter(ARE_YOU_HUMAN).equals(Main.adminKey);
            if (!admin && !parameters.getParameter(ARE_YOU_HUMAN).trim().equals("4")) throw new PostException("You failed the human test...");
            User user = Settings.getUserByName(username);
            if (user != null) throw new PostException("Username taken.");
            if (!Constants.USERNAME_CHECK.matcher(username).matches()) throw new PostException("Username contains invalid chars.<br>Only a-Z, 0-9, _ and - please.");
            try
            {
                user = new User(username, PasswordHash.createHash(parameters.getParameter(PASSWORD)));
                if (admin)
                {
                    user.setGroup(Group.ADMIN);
                    Main.adminKey = null;
                    Main.LOGGER.warn("Admin key claimed. You cannot use it anymore!");
                }
                Settings.SETTINGS.users.put(user.getUsername().toLowerCase(), user);
                request.getSession().setAttribute("user", user);
                Settings.save();

                return LOGIN;
            }
            catch (NoSuchAlgorithmException | InvalidKeySpecException e)
            {
                // Hash algorithm doesn't work.
                throw new RuntimeException(e);
            }
        }
        else throw new PostException("Form not of known format.");
    }

    private String doLogin(String uri, Request request, Response response) throws PostException
    {
        Parameters parameters = request.getParameters();
        Set<String> names = request.getParameterNames();

        if (names.contains(USERNAME) && names.contains(PASSWORD))
        {
            User user = Settings.getUserByName(parameters.getParameter(USERNAME));
            if (user == null) throw new PostException(String.format("User %s can't be found.", parameters.getParameter(USERNAME)));
            if (!user.verify(parameters.getParameter(PASSWORD))) throw new PostException("Password wrong.");
            request.getSession().setAttribute("user", user);
        }
        else if (names.contains("logout"))
        {
            request.getSession().attributes().clear();
            request.changeSessionId();
        }
        else if (names.contains(OLD_PASSWORD) && names.contains(NEW_PASSWORD))
        {
            User user = (User) request.getSession().getAttribute("user");
            if (!user.updatePassword(parameters.getParameter(OLD_PASSWORD), parameters.getParameter(NEW_PASSWORD))) throw new PostException("Password wrong.");
        }
        else throw new PostException("Form not of known format.");

        return uri;
    }

    public static class PostException extends Exception
    {
        public PostException()
        {
        }

        public PostException(String message)
        {
            super(message);
        }

        public PostException(String message, Throwable cause)
        {
            super(message, cause);
        }

        public PostException(Throwable cause)
        {
            super(cause);
        }

        public PostException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace)
        {
            super(message, cause, enableSuppression, writableStackTrace);
        }
    }
}
