/*
 * Unless otherwise specified through the '@author' tag or comments at
 * the top of the file or on a specific portion of the code the following license applies:
 *
 * Copyright (c) 2014, DoubleDoorDevelopment
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 *  The header specified or the above copyright notice, this list of conditions
 *   and the following disclaimer below must be displayed at the top of the source code
 *   of any web page received while using any part of the service this software provides.
 *
 *   The header to be displayed:
 *       This page was generated by DoubleDoorDevelopment's D3Backend or a derivative thereof.
 *
 *  Neither the name of the project nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

package net.doubledoordev.backend.web.http;

import net.doubledoordev.backend.server.FileManager;
import org.apache.logging.log4j.Level;
import org.glassfish.grizzly.ReadHandler;
import org.glassfish.grizzly.http.io.NIOInputStream;
import org.glassfish.grizzly.http.multipart.ContentDisposition;
import org.glassfish.grizzly.http.multipart.MultipartEntry;
import org.glassfish.grizzly.http.multipart.MultipartEntryHandler;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

/**
 * @author Dries007
 */
public class UploaderMultipartHandler implements MultipartEntryHandler
{
    private static final String FILENAME_ENTRY = "fileName";
    private final FileManager fileManager;

    public UploaderMultipartHandler(FileManager fileManager)
    {
        this.fileManager = fileManager;
    }

    @Override
    public void handle(final MultipartEntry multipartEntry) throws Exception
    {
        final ContentDisposition contentDisposition = multipartEntry.getContentDisposition();
        final String name = contentDisposition.getDispositionParamUnquoted("name");

        // If part contains file
        if (name.equals(FILENAME_ENTRY))
        {
            final String filename = contentDisposition.getDispositionParamUnquoted("filename");
            final NIOInputStream inputStream = multipartEntry.getNIOInputStream();

            // start asynchronous non-blocking content read.
            inputStream.notifyAvailable(new UploadReadHandler(new File(fileManager.getFile(), filename), inputStream));
        }
        else
        {
            multipartEntry.skip();
        }
    }

    /**
     * Simple {@link org.glassfish.grizzly.ReadHandler} implementation, which is reading HTTP request
     * content (uploading file) in non-blocking mode and saves the content into
     * the specific file.
     */
    private static class UploadReadHandler implements ReadHandler
    {
        private final NIOInputStream inputStream;
        private final FileOutputStream fileOutputStream;
        private final byte[] buf;

        private UploadReadHandler(final File file, final NIOInputStream inputStream) throws FileNotFoundException
        {
            fileOutputStream = new FileOutputStream(file);
            this.inputStream = inputStream;
            buf = new byte[2048];
        }

        @Override
        public void onDataAvailable() throws Exception
        {
            readAndSaveAvail();
            inputStream.notifyAvailable(this);
        }

        @Override
        public void onAllDataRead() throws Exception
        {
            readAndSaveAvail();
            finish();
        }

        @Override
        public void onError(Throwable t)
        {
            finish();
        }

        private void readAndSaveAvail() throws IOException
        {
            while (inputStream.isReady())
            {
                fileOutputStream.write(buf, 0, inputStream.read(buf));
            }
        }

        private void finish()
        {
            try
            {
                fileOutputStream.close();
            }
            catch (IOException ignored)
            {
            }
        }
    }
}
