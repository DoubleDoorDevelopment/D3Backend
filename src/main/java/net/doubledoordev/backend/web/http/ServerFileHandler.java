/*
 * Unless otherwise specified through the '@author' tag or comments at
 * the top of the file or on a specific portion of the code the following license applies:
 *
 * Copyright (c) 2014, DoubleDoorDevelopment
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 *  The header specified or the above copyright notice, this list of conditions
 *   and the following disclaimer below must be displayed at the top of the source code
 *   of any web page received while using any part of the service this software provides.
 *
 *   The header to be displayed:
 *       This page was generated by DoubleDoorDevelopment's D3Backend or a derivative thereof.
 *
 *  Neither the name of the project nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

package net.doubledoordev.backend.web.http;

import com.google.common.base.Strings;
import net.doubledoordev.backend.permissions.User;
import net.doubledoordev.backend.server.Server;
import net.doubledoordev.backend.util.Settings;
import net.doubledoordev.backend.util.exceptions.AuthenticationException;
import org.glassfish.grizzly.http.Method;
import org.glassfish.grizzly.http.server.Request;
import org.glassfish.grizzly.http.server.Response;
import org.glassfish.grizzly.http.server.StaticHttpHandlerBase;
import org.glassfish.grizzly.http.util.Header;
import org.glassfish.grizzly.http.util.HttpStatus;

import java.io.File;

import static net.doubledoordev.backend.util.Constants.SLASH_STR;
import static net.doubledoordev.backend.util.Constants.USER;

/**
 * @author Dries007
 */
public class ServerFileHandler extends StaticHttpHandlerBase
{
    private final String path;

    public ServerFileHandler(String path)
    {
        this.path = path;
    }

    public ServerFileHandler()
    {
        this.path = null;
    }

    @Override
    protected boolean handle(String uri, Request request, Response response) throws Exception
    {
        if (request.getSession(false) != null) request.getSession();
        if (uri.startsWith(SLASH_STR)) uri = uri.substring(1);

        String[] uris = uri.split("/", 2); // 0 = server, 1 = file
        if (uris.length != 2) return false;

        Server server = Settings.getServerByName(uris[0]);
        if (server == null) return false;

        User user = (User) request.getSession().getAttribute(USER);
        if (user == null || !(user.isAdmin() || server.canUserControl(user)))
        {
            response.setHeader(Header.Allow, Method.GET.getMethodString());
            response.sendError(HttpStatus.UNAUTHORIZED_401.getStatusCode());
            return true;
        }

        File baseFolder = Strings.isNullOrEmpty(path) ? server.getFolder() : new File(server.getFolder(), path);

        File file = new File(baseFolder, uris[1]);
        if (!file.exists() || file.isDirectory()) return false;

        if (!Method.GET.equals(request.getMethod()))
        {
            response.setHeader(Header.Allow, Method.GET.getMethodString());
            response.sendError(HttpStatus.METHOD_NOT_ALLOWED_405.getStatusCode());
            return true;
        }

        pickupContentType(response, file.getPath());

        addToFileCache(request, response, file);
        sendFile(response, file);

        return true;
    }
}
