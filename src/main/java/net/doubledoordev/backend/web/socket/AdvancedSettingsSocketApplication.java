/*
 * Unless otherwise specified through the '@author' tag or comments at
 * the top of the file or on a specific portion of the code the following license applies:
 *
 * Copyright (c) 2014, DoubleDoorDevelopment
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 *  The header specified or the above copyright notice, this list of conditions
 *   and the following disclaimer below must be displayed at the top of the source code
 *   of any web page received while using any part of the service this software provides.
 *
 *   The header to be displayed:
 *       This page was generated by DoubleDoorDevelopment's D3Backend or a derivative thereof.
 *
 *  Neither the name of the project nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

package net.doubledoordev.backend.web.socket;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import net.doubledoordev.backend.Main;
import net.doubledoordev.backend.permissions.User;
import net.doubledoordev.backend.server.RestartingInfo;
import net.doubledoordev.backend.server.Server;
import net.doubledoordev.backend.util.WebSocketHelper;
import net.doubledoordev.backend.util.methodCaller.WebSocketCaller;
import org.glassfish.grizzly.websockets.DefaultWebSocket;
import org.glassfish.grizzly.websockets.WebSocket;
import org.glassfish.grizzly.websockets.WebSocketEngine;

import javax.xml.crypto.Data;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.TimerTask;

import static net.doubledoordev.backend.util.Constants.*;
import static net.doubledoordev.backend.util.Constants.SERVER;

/**
 * @author Dries007
 */
public class AdvancedSettingsSocketApplication extends ServerWebSocketApplication
{
    private static final AdvancedSettingsSocketApplication APPLICATION = new AdvancedSettingsSocketApplication();
    private static final String                            URL_PATTERN = "/advancedsettings/*";
    public static final HashMap<String, Data>              DATA_TYPES = new HashMap<>();

    static
    {
        try
        {
            DATA_TYPES.put(RESTARTING_INFO, new Data(RestartingInfo.class, RESTARTING_INFO));
        }
        catch (NoSuchMethodException e)
        {
            throw new RuntimeException(e);
        }
    }

    private AdvancedSettingsSocketApplication()
    {
        TIMER.scheduleAtFixedRate(new TimerTask()
        {
            @Override
            public void run()
            {
                for (WebSocket socket : getWebSockets()) socket.sendPing("ping".getBytes());
            }
        }, SOCKET_PING_TIME, SOCKET_PING_TIME);
    }

    @Override
    public void onConnect(WebSocket socket)
    {
        super.onConnect(socket);

        WebSocketHelper.sendData(socket, getData((Server) ((DefaultWebSocket) socket).getUpgradeRequest().getAttribute(SERVER)));
    }

    @Override
    public void onMessage(WebSocket socket, String text)
    {
        Server server = (Server) ((DefaultWebSocket) socket).getUpgradeRequest().getAttribute(SERVER);
        JsonObject object = JSONPARSER.parse(text).getAsJsonObject();
        for (String key : DATA_TYPES.keySet())
        {
            if (object.has(key))
            {
                try
                {
                    DATA_TYPES.get(key).handle(server, object.getAsJsonObject(key));
                }
                catch (Exception e)
                {
                    WebSocketHelper.sendError(socket, e);
                }
            }
        }
        doSendUpdateToAll(server);
    }

    private void doSendUpdateToAll(Server server)
    {
        for (WebSocket socket : getWebSockets())
        {
            if (((DefaultWebSocket) socket).getUpgradeRequest().getAttribute(SERVER) != server) continue;
            if (server.canUserControl((User) ((DefaultWebSocket) socket).getUpgradeRequest().getAttribute(USER))) WebSocketHelper.sendData(socket, getData(server));
        }
    }

    public JsonObject getData(Server server)
    {
        JsonObject object = new JsonObject();

        return object;
    }

    public static void register()
    {
        WebSocketEngine.getEngine().register(SOCKET_CONTEXT, URL_PATTERN, APPLICATION);
    }

    public static class Data
    {
        public final Class clazz;
        public final Method getter;

        public Data(Class clazz, String getterName) throws NoSuchMethodException
        {
            this.clazz = clazz;
            Method m = null;
            try
            {
                m = Server.class.getDeclaredMethod(getterName);
            }
            catch (NoSuchMethodException ignored)
            {
                m = Server.class.getDeclaredMethod("get" + getterName);
            }
            this.getter = m;
        }

        public void handle(Server server, JsonObject data) throws Exception
        {
            for (Map.Entry<String, JsonElement> entry : data.entrySet())
            {
                Field f = RestartingInfo.class.getDeclaredField(entry.getKey());

                if (f.getType() == byte.class || f.getType() == Byte.class) f.setByte(getter.invoke(server), entry.getValue().getAsByte());
                else if (f.getType() == short.class || f.getType() == Short.class) f.setShort(getter.invoke(server), entry.getValue().getAsShort());
                else if (f.getType() == int.class || f.getType() == Integer.class) f.setInt(getter.invoke(server), entry.getValue().getAsInt());
                else if (f.getType() == long.class || f.getType() == Long.class) f.setLong(getter.invoke(server), entry.getValue().getAsLong());
                else if (f.getType() == float.class || f.getType() == Float.class) f.setFloat(getter.invoke(server), entry.getValue().getAsFloat());
                else if (f.getType() == double.class || f.getType() == Double.class) f.setDouble(getter.invoke(server), entry.getValue().getAsDouble());
                else if (f.getType() == boolean.class || f.getType() == Boolean.class) f.setBoolean(getter.invoke(server), entry.getValue().getAsBoolean());
                else if (f.getType() == char.class || f.getType() == Character.class) f.setChar(getter.invoke(server), entry.getValue().getAsCharacter());
                else if (f.getType() == String.class) f.set(getter.invoke(server), entry.getValue().getAsString());
                else
                {
                    String m = String.format("Unknown type! Field type: %s Json entry: %s Data class: %s Getter Method: %s", f.getType(), entry.getValue().toString(), clazz.getSimpleName(), getter.getName());
                    Main.LOGGER.error(m);
                    throw new Exception(m);
                }
            }
        }
    }
}
