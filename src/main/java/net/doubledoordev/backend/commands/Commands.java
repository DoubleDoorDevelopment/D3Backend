/*
 * Unless otherwise specified through the '@author' tag or comments at
 * the top of the file or on a specific portion of the code the following license applies:
 *
 * Copyright (c) 2014, DoubleDoorDevelopment
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 *  The header specified or the above copyright notice, this list of conditions
 *   and the following disclaimer below must be displayed at the top of the source code
 *   of any web page received while using any part of the service this software provides.
 *
 *   The header to be displayed:
 *       This page was generated by DoubleDoorDevelopment's D3Backend or a derivative thereof.
 *
 *  Neither the name of the project nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

package net.doubledoordev.backend.commands;

import com.sk89q.intake.Command;
import com.sk89q.intake.CommandException;
import com.sk89q.intake.CommandMapping;
import com.sk89q.intake.dispatcher.Dispatcher;
import com.sk89q.intake.parametric.annotation.Optional;
import com.sk89q.intake.parametric.annotation.Switch;
import com.sk89q.intake.parametric.annotation.Text;
import net.doubledoordev.backend.server.Server;
import net.doubledoordev.backend.server.WorldManager;

import static net.doubledoordev.backend.commands.CommandHandler.CMDLOGGER;
import static net.doubledoordev.backend.util.Constants.JOINER_COMMA_SPACE;
import static net.doubledoordev.backend.util.Settings.SETTINGS;

/**
 * @author Dries007
 */
public class Commands
{
    private final Dispatcher dispatcher;

    public Commands(CommandHandler commandHandler)
    {
        this.dispatcher = commandHandler.dispatcher;
    }

    @Command(aliases = {"help", "?"}, desc = "Get a list of commands", help = "Use this to get help", usage = "[Command]", max = 1)
    public void cmdHelp(@Optional String command) throws CommandException
    {
        // Command list
        if (command == null)
        {
            CMDLOGGER.info("--==## Command list ##==--");
            for (CommandMapping cmd : dispatcher.getCommands())
            {
                CMDLOGGER.info(cmd.getPrimaryAlias() + ' ' + cmd.getDescription().getUsage() + " => " + cmd.getDescription().getShortDescription()); // Looks like this: Name ListOfParameters => Description
            }
        }
        else
        {
            CommandMapping cmd = dispatcher.get(command);

            if (cmd == null) throw new CommandNotFoundException(command);

            CMDLOGGER.info(String.format("--==## Help for %s ##==--", command));
            CMDLOGGER.info(String.format("Name: %s \t Aliases: %s", cmd.getPrimaryAlias(), JOINER_COMMA_SPACE.join(cmd.getAllAliases())));
            CMDLOGGER.info(String.format("Usage: %s %s", cmd.getPrimaryAlias(), cmd.getDescription().getUsage()));
            CMDLOGGER.info(String.format("Short description: %s", cmd.getDescription().getShortDescription()));
            CMDLOGGER.info(String.format("Help text: %s", cmd.getDescription().getHelp()));
        }
    }

    @Command(aliases = {"serverlist", "servers"}, desc = "List all servers", max = 0)
    public void cmdServerList()
    {
        CMDLOGGER.info("All servers:");
        CMDLOGGER.info(JOINER_COMMA_SPACE.join(SETTINGS.getServers()));
        CMDLOGGER.info("Online servers:");
        CMDLOGGER.info(JOINER_COMMA_SPACE.join(SETTINGS.getOnlineServers()));
    }

    @Command(aliases = "message", desc = "Send message to servers (with /say)", usage = "<server name (regex)> <message ...>", min = 2)
    public void cmdMessage(Server[] servers, @Text String msg) throws CommandException
    {
        for (Server server : servers)
        {
            if (!server.getOnline()) continue;
            server.send(String.format("/say %s", msg));
        }
    }

    @Command(aliases = "backup", desc = "Make full backup of one or more servers", usage = "<server name (regex)>", min = 1, max = 1)
    public void cmdBackup(Server[] servers) throws CommandException
    {
        for (Server server : servers)
        {
            try
            {
                server.getWorldManager().bypassLimits = true;
                server.getWorldManager().makeAllOfTheBackup();
            }
            catch (WorldManager.BackupException e)
            {
                CMDLOGGER.warn("Error when making a backup of " + server.getName());
                CMDLOGGER.warn(e);
            }
        }
    }

    @Command(aliases = "stop", desc = "Stop one or more servers", usage = "<server name (regex)> [-f (force the stop)] [message ...]", min = 1)
    public void cmdStop(Server[] servers, @Optional @Switch('f') boolean force, @Optional("Stopping the server.") @Text String msg) throws CommandException
    {
        for (Server server : servers)
        {
            if (!server.getOnline()) continue;
            if (server.stopServer(msg)) CMDLOGGER.info(String.format("Shutdown command send to %s", server.getName()));
            else CMDLOGGER.warn(String.format("Server %s did not shutdown with a message.", server.getName()));
        }
    }

    @Command(aliases = "start", desc = "Start one or more servers", usage = "<server name (regex)>", min = 1)
    public void cmdStart(Server[] servers, @Optional @Switch('f') boolean force, @Optional("Stopping the server.") @Text String msg) throws CommandException
    {
        for (Server server : servers)
        {
            if (server.getOnline()) continue;
            try
            {
                server.startServer();
            }
            catch (Exception e)
            {
                CMDLOGGER.warn("Not able to start server " + server.getName());
                CMDLOGGER.warn(e);
            }
        }
    }
}
