/*
 * Unless otherwise specified through the '@author' tag or comments at
 * the top of the file or on a specific portion of the code the following license applies:
 *
 * Copyright (c) 2014, DoubleDoorDevelopment
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 *  The header specified or the above copyright notice, this list of conditions
 *   and the following disclaimer below must be displayed at the top of the source code
 *   of any web page received while using any part of the service this software provides.
 *
 *   The header to be displayed:
 *       This page was generated by DoubleDoorDevelopment's D3Backend or a derivative thereof.
 *
 *  Neither the name of the project nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.doubledoordev.backend;

import net.doubledoordev.backend.commands.CommandHandler;
import net.doubledoordev.backend.server.Server;
import net.doubledoordev.backend.util.Cache;
import net.doubledoordev.backend.util.Constants;
import net.doubledoordev.backend.util.Settings;
import net.doubledoordev.backend.web.http.FreemarkerHandler;
import net.doubledoordev.backend.web.http.ServerFileHandler;
import net.doubledoordev.backend.web.socket.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.glassfish.grizzly.http.server.CLStaticHttpHandler;
import org.glassfish.grizzly.http.server.HttpServer;
import org.glassfish.grizzly.http.server.NetworkListener;
import org.glassfish.grizzly.http.server.ServerConfiguration;
import org.glassfish.grizzly.ssl.SSLContextConfigurator;
import org.glassfish.grizzly.ssl.SSLEngineConfigurator;
import org.glassfish.grizzly.websockets.WebSocketAddOn;

import java.io.IOException;
import java.lang.reflect.Field;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Properties;
import java.util.UUID;

import static net.doubledoordev.backend.util.Constants.*;
import static net.doubledoordev.backend.util.Settings.SETTINGS;

/**
 * @author Dries007
 */
public class Main
{
    public static final long   STARTTIME = System.currentTimeMillis();
    public static final Logger LOGGER    = LogManager.getLogger(Main.class.getSimpleName());
    public static final String build, version;
    public static String adminKey;
    public static boolean running = true;

    static
    {
        Properties properties = new Properties();
        try
        {
            properties.load(Main.class.getResourceAsStream("/properties.properties"));
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        build = properties.getProperty("build");
        version = properties.getProperty("version");
    }

    private Main()
    {

    }

    private static SSLEngineConfigurator createSslConfiguration()
    {
        // Initialize SSLContext configuration
        SSLContextConfigurator sslContextConfig = new SSLContextConfigurator();

        ClassLoader cl = Server.class.getClassLoader();
        // Set key store
        URL keystoreUrl = cl.getResource(SETTINGS.certificatePath);
        if (keystoreUrl != null)
        {
            sslContextConfig.setKeyStoreFile(keystoreUrl.getFile());
            sslContextConfig.setKeyStorePass(SETTINGS.certificatePass);
        }

        // Create SSLEngine configurator
        return new SSLEngineConfigurator(sslContextConfig.createSSLContext(), false, false, false);
    }

    public static void main(String[] args) throws Exception
    {
        System.setProperty("file.encoding", "UTF-8");
        Field charset = Charset.class.getDeclaredField("defaultCharset");
        charset.setAccessible(true);
        charset.set(null, null);

        LOGGER.info("Making necessary folders...");
        mkdirs();
        LOGGER.info("Starting webserver...");

        final HttpServer webserver = new HttpServer();
        final ServerConfiguration config = webserver.getServerConfiguration();

        // Html stuff
        FreemarkerHandler freemarkerHandler = new FreemarkerHandler(Main.class, TEMPLATES_PATH);
        config.addHttpHandler(freemarkerHandler);
        config.setDefaultErrorPageGenerator(freemarkerHandler);
        config.addHttpHandler(new CLStaticHttpHandler(Main.class.getClassLoader(), STATIC_PATH), STATIC_PATH);
        config.addHttpHandler(new ServerFileHandler(P2S_PATH), P2S_PATH);
        config.addHttpHandler(new ServerFileHandler(), RAW_PATH);

        // Socket stuff
        ServerMonitorSocketApplication.register();
        ServerControlSocketApplication.register();
        ServerPropertiesSocketApplication.register();
        FileManagerSocketApplication.register();
        ServerconsoleSocketApplication.register();
        ConsoleSocketApplication.register();
        AdvancedSettingsSocketApplication.register();

        final NetworkListener networkListener = new NetworkListener("secured-listener");
        //networkListener.setSecure(true);
        //networkListener.setSSLEngineConfig(createSslConfiguration());
        webserver.addListener(networkListener);
        networkListener.registerAddOn(new WebSocketAddOn());
        webserver.start();

        LOGGER.info("Setting up caching...");
        Cache.init();

        if (SETTINGS.users.isEmpty())
        {
            adminKey = UUID.randomUUID().toString();
            LOGGER.warn("Your userlist is empty.");
            LOGGER.warn("Make a new account and use the special admin token in the '2 + 2 = ?' field.");
            LOGGER.warn("You can only use this key once. It will be regenerated if the userlist is empty when the backend starts.");
            LOGGER.warn("Admin token: " + adminKey);
        }

        LOGGER.info("Use the help command for help.");

        CommandHandler.init();
        for (Server server : SETTINGS.servers.values())
        {
            server.init();
            if (server.getAutoStart())
            {
                try
                {
                    server.startServer();
                }
                catch (Exception ignored)
                {
                    ignored.printStackTrace();
                }
            }
        }
    }

    @SuppressWarnings("ResultOfMethodCallIgnored")
    private static void mkdirs()
    {
        Constants.SERVERS.mkdir();
    }

    public static synchronized void shutdown()
    {
        running = false;
        Settings.save();
        Cache.init();
        LOGGER.info("Attempting graceful shutdown of all servers...");
        for (final Server server : Settings.SETTINGS.servers.values())
        {
            if (server.getOnline())
            {
                LOGGER.info("Server " + server.getID() + " is still online.");
                try
                {
                    try
                    {
                        server.stopServer(NAME + " shutdown!");
                    }
                    catch (Exception e)
                    {
                        server.getProcess().destroy();
                    }

                    LOGGER.info("Waiting for server " + server.getID() + " to shutdown...");
                    server.getProcess().waitFor();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                    LOGGER.info("Something went wrong while waiting for server " + server.getID(), e);
                }
            }
        }
        LOGGER.info("Bye!");
    }
}
