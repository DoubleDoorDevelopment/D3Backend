/*
 * Unless otherwise specified through the '@author' tag or comments at
 * the top of the file or on a specific portion of the code the following license applies:
 *
 * Copyright (c) 2014, DoubleDoorDevelopment
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 *  The header specified or the above copyright notice, this list of conditions
 *   and the following disclaimer below must be displayed at the top of the source code
 *   of any web page received while using any part of the service this software provides.
 *
 *   The header to be displayed:
 *       This page was generated by DoubleDoorDevelopment's D3Backend or a derivative thereof.
 *
 *  Neither the name of the project nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.doubledoordev.backend;

import net.doubledoordev.backend.commands.CommandHandler;
import net.doubledoordev.backend.server.Server;
import net.doubledoordev.backend.server.rcon.RCon;
import net.doubledoordev.backend.util.Cache;
import net.doubledoordev.backend.util.Constants;
import net.doubledoordev.backend.util.Settings;
import net.doubledoordev.backend.webserver.NanoHTTPD;
import net.doubledoordev.backend.webserver.RedirectToSSLServer;
import net.doubledoordev.backend.webserver.Webserver;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.util.Strings;

import java.io.IOException;
import java.lang.reflect.Field;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Properties;
import java.util.UUID;

import static net.doubledoordev.backend.util.Constants.NAME;
import static net.doubledoordev.backend.util.Settings.SETTINGS;

/**
 * @author Dries007
 */
public class Main
{
    public static final Logger LOGGER = LogManager.getLogger(Main.class.getSimpleName());
    public static String adminKey;
    public static boolean running = true;

    public static final String build, version;

    static
    {
        Properties properties = new Properties();
        try
        {
            properties.load(Main.class.getResourceAsStream("/properties.properties"));
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        build = properties.getProperty("build");
        version = properties.getProperty("version");
    }

    private Main()
    {

    }

    public static void main(String[] args) throws Exception
    {
        System.setProperty("file.encoding", "UTF-8");
        Field charset = Charset.class.getDeclaredField("defaultCharset");
        charset.setAccessible(true);
        charset.set(null, null);

        LOGGER.info("Finding Java versions...");
        //noinspection ResultOfMethodCallIgnored
        Constants.JAVAPATH.length();
        Settings.save();
        LOGGER.info("Making necessary folders...");
        mkdirs();
        LOGGER.info("Starting webserver...");
        if (Strings.isBlank(SETTINGS.certificatePath) || SETTINGS.certificatePass.length == 0)
        {
            LOGGER.warn("YOU ARE PUTTING YOUR USERS AR RISK BY NOT USING HTTPS!");
            LOGGER.warn("A banner will be displayed at the top of the home page to indicate this issue.");
            LOGGER.warn("You can make a (self signed) certificate by using Java's built in KeyTools.");
            LOGGER.warn("It must be a .jks certificate!");

            LOGGER.info("HTTP Webserver started on " + SETTINGS.hostname + ':' + SETTINGS.portHTTP);
            Webserver.WEBSERVER = new Webserver(SETTINGS.hostname, SETTINGS.portHTTP);
        }
        else
        {
            if (SETTINGS.portHTTP != 0)
            {
                LOGGER.info("HTTP Redirect server started on " + SETTINGS.hostname + ':' + SETTINGS.portHTTP);
                if (Strings.isNotBlank(SETTINGS.hostname)) new RedirectToSSLServer(SETTINGS.hostname, SETTINGS.portHTTP).start();
                else new RedirectToSSLServer(SETTINGS.portHTTP).start();
            }
            LOGGER.info("HTTPS Webserver started on " + SETTINGS.hostname + ':' + SETTINGS.portHTTPS);
            if (Strings.isNotBlank(SETTINGS.hostname)) Webserver.WEBSERVER = new Webserver(SETTINGS.hostname, SETTINGS.portHTTPS);
            else Webserver.WEBSERVER = new Webserver(SETTINGS.portHTTPS);
            Webserver.WEBSERVER.makeSecure(NanoHTTPD.makeSSLSocketFactory(SETTINGS.certificatePath, SETTINGS.certificatePass));
        }
        Webserver.WEBSERVER.start();
        LOGGER.info("Setting up caching...");
        Cache.init();

        if (SETTINGS.users.isEmpty())
        {
            adminKey = UUID.randomUUID().toString();
            LOGGER.warn("Your userlist is empty.");
            LOGGER.warn("Make a new account and use the special admin token in the '2 + 2 = ?' field.");
            LOGGER.warn("You can only use this key once. It will be regenerated if the userlist is empty when the backend starts.");
            LOGGER.warn("Admin token: " + adminKey);
        }

        LOGGER.info("Use the help command for help.");

        CommandHandler.init();
    }

    @SuppressWarnings("ResultOfMethodCallIgnored")
    private static void mkdirs()
    {
        Constants.SERVERS.mkdir();
    }

    public static synchronized void shutdown()
    {
        running = false;
        Settings.save();
        LOGGER.info("Attempting graceful shutdown of all servers...");
        for (final Server server : Settings.SETTINGS.servers.values())
        {
            if (server.getOnline())
            {
                LOGGER.info("Server " + server.getName() + " is still online.");
                try
                {
                    RCon rCon = server.getRCon();
                    try
                    {
                        for (String user : server.getPlayerList()) rCon.send("kick", user, NAME + " shutdown!");
                        rCon.stop();
                    }
                    catch (Exception e)
                    {
                        server.getProcess().destroy();
                    }

                    LOGGER.info("Waiting for server " + server.getName() + " to shutdown...");
                    server.getProcess().waitFor();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                    LOGGER.info("Something went wrong while waiting for server " + server.getName(), e);
                }
            }
        }
        LOGGER.info("Bye!");
    }

    /**
     * Useful when debugging requests
     *
     * @param session
     * @param dataObject
     */
    public static void printdebug(NanoHTTPD.HTTPSession session, HashMap<String, Object> dataObject)
    {
        LOGGER.debug("getParms: " + session.getParms());
        LOGGER.debug("getHeaders: " + session.getHeaders());
        LOGGER.debug("getUri: " + session.getUri());
        LOGGER.debug("getQueryParameterString: " + session.getQueryParameterString());
        LOGGER.debug("getMethod: " + session.getMethod());
        LOGGER.debug("getCookies: " + session.getCookies());
        LOGGER.debug("dataObject: " + dataObject);
        LOGGER.debug("-----================================-----");
    }
}
