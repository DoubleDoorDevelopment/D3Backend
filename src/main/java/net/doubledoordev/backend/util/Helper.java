/*
 * Unless otherwise specified through the '@author' tag or comments at
 * the top of the file or on a specific portion of the code the following license applies:
 *
 * Copyright (c) 2014, DoubleDoorDevelopment
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 *  The header specified or the above copyright notice, this list of conditions
 *   and the following disclaimer below must be displayed at the top of the source code
 *   of any web page received while using any part of the service this software provides.
 *
 *   The header to be displayed:
 *       This page was generated by DoubleDoorDevelopment's D3Backend or a derivative thereof.
 *
 *  Neither the name of the project nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.doubledoordev.backend.util;

import net.doubledoordev.backend.server.Server;
import org.spout.nbt.Tag;
import org.spout.nbt.stream.NBTInputStream;
import org.spout.nbt.stream.NBTOutputStream;

import java.io.*;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;

import static net.doubledoordev.backend.util.Constants.RANDOM;
import static net.doubledoordev.backend.util.Constants.symbols;

/**
 * Public static helper methods
 * Passed to template engine
 *
 * @author Dries007
 */
@SuppressWarnings("UnusedDeclaration")
public class Helper
{
    private Helper()
    {
    }

    /**
     * Checks to see if a port/hostname combo is available through opening a socked and closing it again
     *
     * @param hostname the hostname, if null this is bypassed
     * @param port     the port to check
     * @return true if available
     */
    public static boolean isPortAvailable(String hostname, int port)
    {
        try
        {
            ServerSocket socket = new ServerSocket();
            socket.bind(hostname == null || hostname.length() == 0 ? new InetSocketAddress(port) : new InetSocketAddress(hostname, port));
            socket.close();
            return true;
        }
        catch (IOException e)
        {
            return false;
        }
    }

    public static String randomString(int length)
    {
        return new String(randomCharArray(length));
    }

    public static char[] randomCharArray(int length)
    {
        if (length < 1) throw new IllegalArgumentException("length < 1: " + length);

        final char[] buf = new char[length];

        for (int idx = 0; idx < buf.length; ++idx) buf[idx] = symbols[RANDOM.nextInt(symbols.length)];
        return buf;
    }

    /**
     * @return set of all MC versions we can grab from mojang
     */
    public static Collection<String> getAllMCVersions()
    {
        return Cache.getMcVersions();
    }

    public static Collection<String> getForgeNames()
    {
        return Cache.getForgeNames();
    }

    public static String getForgeVersionForName(String name)
    {
        return Cache.getForgeVersionForName(name);
    }

    public static int getTotalRamUsed()
    {
        int total = 0;
        for (Server server : Settings.SETTINGS.getOnlineServers()) total += server.getRamMax();
        return total;
    }

    public static int getTotalDiskspaceUsed()
    {
        int total = 0;
        for (Server server : Settings.SETTINGS.getServers()) total += server.getDiskspaceUse();
        return total;
    }

    private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");

    public static String getNowInBanFormat()
    {
        return dateFormat.format(new Date());
    }

    public static Tag<?> readRawNBT(File file, boolean compressed)
    {
        Tag<?> tag = null;
        try
        {
            InputStream is = new FileInputStream(file);
            NBTInputStream ns = new NBTInputStream(is, compressed);
            try
            {
                tag = ns.readTag();
            }
            finally
            {
                try
                {
                    ns.close();
                }
                catch (IOException ignored)
                {

                }
            }
        }
        catch (Exception ignored)
        {

        }
        return tag;
    }

    public static void writeRawNBT(File file, boolean compressed, Tag<?> tag)
    {
        try
        {
            OutputStream is = new FileOutputStream(file);
            NBTOutputStream ns = new NBTOutputStream(is, compressed);
            try
            {
                ns.writeTag(tag);
            }
            finally
            {
                try
                {
                    ns.close();
                }
                catch (IOException ignored)
                {

                }
            }
        }
        catch (Exception ignored)
        {

        }
    }
}
