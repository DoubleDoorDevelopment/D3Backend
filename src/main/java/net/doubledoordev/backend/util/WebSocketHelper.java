/*
 * Unless otherwise specified through the '@author' tag or comments at
 * the top of the file or on a specific portion of the code the following license applies:
 *
 * Copyright (c) 2014, DoubleDoorDevelopment
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 *  The header specified or the above copyright notice, this list of conditions
 *   and the following disclaimer below must be displayed at the top of the source code
 *   of any web page received while using any part of the service this software provides.
 *
 *   The header to be displayed:
 *       This page was generated by DoubleDoorDevelopment's D3Backend or a derivative thereof.
 *
 *  Neither the name of the project nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

package net.doubledoordev.backend.util;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import net.doubledoordev.backend.server.Server;
import net.doubledoordev.backend.web.socket.ServerControlSocketApplication;
import net.doubledoordev.backend.web.socket.ServerMonitorSocketApplication;
import net.doubledoordev.backend.web.socket.ServerPropertiesSocketApplication;
import org.glassfish.grizzly.websockets.WebSocket;

import static net.doubledoordev.backend.util.Constants.*;

/**
 * @author Dries007
 */
public class WebSocketHelper
{
    private WebSocketHelper()
    {
    }

    public static void sendError(WebSocket socket, String message)
    {
        JsonObject root = new JsonObject();

        root.addProperty(STATUS, ERROR);
        root.addProperty(MESSAGE, message);

        socket.send(root.toString());
    }

    public static void sendData(WebSocket socket, String s)
    {
        JsonObject root = new JsonObject();

        root.addProperty(STATUS, OK);
        root.addProperty(DATA, s);

        socket.send(root.toString());
    }

    public static void sendData(WebSocket socket, Boolean b)
    {
        JsonObject root = new JsonObject();

        root.addProperty(STATUS, OK);
        root.addProperty(DATA, b);

        socket.send(root.toString());
    }

    public static void sendData(WebSocket socket, Character c)
    {
        JsonObject root = new JsonObject();

        root.addProperty(STATUS, OK);
        root.addProperty(DATA, c);

        socket.send(root.toString());
    }

    public static void sendData(WebSocket socket, Number n)
    {
        JsonObject root = new JsonObject();

        root.addProperty(STATUS, OK);
        root.addProperty(DATA, n);

        socket.send(root.toString());
    }

    public static void sendData(WebSocket socket, JsonElement s)
    {
        JsonObject root = new JsonObject();

        root.addProperty(STATUS, OK);
        root.add(DATA, s);

        socket.send(root.toString());
    }

    public static void sendServerUpdate(Server instance)
    {
        ServerMonitorSocketApplication.sendUpdateToAll(instance);
        ServerPropertiesSocketApplication.sendUpdateToAll(instance);
    }

    public static void sendOk(WebSocket socket)
    {
        JsonObject root = new JsonObject();

        root.addProperty(STATUS, OK);

        socket.send(root.toString());
    }

    public static void sendError(WebSocket socket, Throwable e)
    {
        StringBuilder error = new StringBuilder();
        do
        {
            error.append('\n').append(e.getClass().getSimpleName());
            if (e.getMessage() != null) error.append(": ").append(e.getMessage());
        }
        while ((e = e.getCause()) != null);
        WebSocketHelper.sendError(socket, error.substring(1));
        socket.close();
    }
}
