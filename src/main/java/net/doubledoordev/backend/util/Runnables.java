/*
 * Unless otherwise specified through the '@author' tag or comments at
 * the top of the file or on a specific portion of the code the following license applies:
 *
 * Copyright (c) 2014, DoubleDoorDevelopment
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 *  The header specified or the above copyright notice, this list of conditions
 *   and the following disclaimer below must be displayed at the top of the source code
 *   of any web page received while using any part of the service this software provides.
 *
 *   The header to be displayed:
 *       This page was generated by DoubleDoorDevelopment's D3Backend or a derivative thereof.
 *
 *  Neither the name of the project nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.doubledoordev.backend.util;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import org.apache.commons.io.IOUtils;

import java.io.IOException;
import java.net.URL;
import java.util.*;

import static net.doubledoordev.backend.util.Constants.CAPACITY_FORGE_MAP;

/**
 * Contains static Runnables that are used often
 *
 * @author Dries007
 */
public class Runnables
{
    final static ArrayList<String>             CASHED_MC_VERSIONS = new ArrayList<>();
    final static LinkedHashMap<String, String> NAME_VERSION_MAP   = new LinkedHashMap<>(CAPACITY_FORGE_MAP);
    static       long                          lastForgeVersions  = 0L;
    static final Runnable FORGE_VERSIONS_DOWNLOADER = new Runnable()
    {
        private boolean hasInstaller(JsonObject object)
        {
            for (JsonElement files : object.getAsJsonArray("files"))
                for (JsonElement element : files.getAsJsonArray())
                    if (element.getAsString().equals("installer"))
                        return true;
            return false;
        }

        @Override
        public void run()
        {
            try
            {
                LinkedHashMap<String, Integer> nameBuildMap = new LinkedHashMap<>(Constants.CAPACITY_FORGE_MAP);
                HashMap<Integer, String> buildVersionMap = new HashMap<>(Constants.CAPACITY_FORGE_MAP);
                JsonObject versionList = Constants.JSONPARSER.parse(IOUtils.toString(new URL(Constants.FORGE_VERIONS_URL).openStream())).getAsJsonObject();
                JsonObject latest = versionList.getAsJsonObject("promos");
                HashSet<Integer> buildsWithoutInstaller = new HashSet<>();

                nameBuildMap.put("~~==## \\/ Recommended Versions \\/ ##==~~", null);
                for (Map.Entry<String, JsonElement> element : latest.entrySet())
                {
                    nameBuildMap.put(String.format("%s (build %d)", element.getKey(), element.getValue().getAsInt()), element.getValue().getAsInt());
                }
                nameBuildMap.put("~~==## \\/ Specific Versions \\/ ##==~~", null);
                for (Map.Entry<String, JsonElement> entry : versionList.getAsJsonObject("number").entrySet())
                {
                    JsonObject object = entry.getValue().getAsJsonObject();

                    nameBuildMap.put(String.format("%s (MC %s)", object.get("version").getAsString(), object.get("mcversion").getAsString()), object.get("build").getAsInt());
                    buildVersionMap.put(object.get("build").getAsInt(), String.format("%s-%s", object.get("mcversion").getAsString(), object.get("version").getAsString()));

                    if (!hasInstaller(object)) buildsWithoutInstaller.add(object.get("build").getAsInt());

                }
                synchronized (NAME_VERSION_MAP)
                {
                    NAME_VERSION_MAP.clear();
                    for (Map.Entry<String, Integer> entry : nameBuildMap.entrySet())
                    {
                        if (!buildsWithoutInstaller.contains(entry.getValue())) NAME_VERSION_MAP.put(entry.getKey(), buildVersionMap.get(entry.getValue()));
                    }
                }
                lastForgeVersions = System.currentTimeMillis();
            }
            catch (IOException e)
            {
                //
            }
        }

    };
    static       long                          lastMCVersions     = 0L;
    static final Runnable MC_VERSIONS_DOWNLOADER    = new Runnable()
    {
        @Override
        public void run()
        {
            try
            {
                JsonObject versionList = Constants.JSONPARSER.parse(IOUtils.toString(new URL(Constants.MC_VERIONS_URL).openStream())).getAsJsonObject();
                JsonObject latest = versionList.getAsJsonObject("latest");
                synchronized (CASHED_MC_VERSIONS)
                {
                    CASHED_MC_VERSIONS.clear();
                    CASHED_MC_VERSIONS.add(latest.get("snapshot").getAsString());
                    CASHED_MC_VERSIONS.add(latest.get("release").getAsString());
                    for (JsonElement element : versionList.getAsJsonArray("versions"))
                    {
                        JsonObject o = element.getAsJsonObject();
                        if (o.get("type").getAsString().equals("release") || o.get("type").getAsString().equals("snapshot"))
                            if (!CASHED_MC_VERSIONS.contains(o.get("id").getAsString()))
                                CASHED_MC_VERSIONS.add(o.get("id").getAsString());
                    }
                }
                lastMCVersions = System.currentTimeMillis();
            }
            catch (IOException e)
            {
                //
            }
        }
    };
}
