buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: "com.github.rodionmoiseev.gradle.plugins", name: "idea-utils", version: "0.2"
    }
}

apply plugin: "java"
apply plugin: "maven"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "idea-utils"

archivesBaseName = "D3Backend"
group = "net.doubledoordev.backend"

version = "0.9.0"
if (System.getenv().BUILD_NUMBER != null) version += "." + System.getenv().BUILD_NUMBER

def vendor = "DoubleDoorDevelopment"
def gitURL = "github.com/DoubleDoorDevelopment/D3Backend"

sourceCompatibility = 1.7
targetCompatibility = 1.7

//noinspection GroovyAssignabilityCheck
configurations {
    compile
    deployJars
}

idea {
    project {
        copyright {
            name = "AGPL v3.0"
            license =
                    "    D3Backend\n" +
                    "    Copyright (C) 2015  Dries007 & Double Door Development\n" +
                    "\n" +
                    "    This program is free software: you can redistribute it and/or modify\n" +
                    "    it under the terms of the GNU Affero General Public License as published\n" +
                    "    by the Free Software Foundation, either version 3 of the License, or\n" +
                    "    (at your option) any later version.\n" +
                    "\n" +
                    "    This program is distributed in the hope that it will be useful,\n" +
                    "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n" +
                    "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n" +
                    "    GNU Affero General Public License for more details.\n" +
                    "\n" +
                    "    You should have received a copy of the GNU Affero General Public License\n" +
                    "    along with this program.  If not, see <http://www.gnu.org/licenses/>."
        }
        runConfigurations {
            Launcher {
                name = "Client"
                type = "Application"
                mainClass = project.group + ".Main"
                file("run/").mkdir()
                module = project
                workingDirectory = file("run/")
            }
        }
    }
}

repositories {
    mavenCentral()
    maven {
	    name = 'sk89q'
        url = "http://maven.sk89q.com/repo/"
    }
	maven {
        name = 'sonatype-nexus'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}

//noinspection GroovyAssignabilityCheck
dependencies {
    compile group: "com.google.code.gson", name: "gson", version: "2.2.4"
    compile group: "org.apache.commons", name: "commons-io", version: "1.3.2"
    compile group: "org.apache.commons", name: "commons-lang3", version: "3.3.2"
    compile group: "commons-codec", name: "commons-codec", version: "1.9"
    compile group: "org.freemarker", name: "freemarker", version: "2.3.20"
    compile group: "org.apache.logging.log4j", name: "log4j-core", version: "2.0.2"
    compile group: "net.lingala.zip4j", name: "zip4j", version: "1.3.2"
    compile group: "com.sk89q", name: "intake", version: "3.1.1-SNAPSHOT"
    compile group: "org.glassfish.grizzly", name: "grizzly-http-all", version: "2.3.17"
    compile group: "com.flowpowered", name: "flow-nbt", version: "1.0.0"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '*.properties'
        expand 'version': project.version, 'build': System.getenv().BUILD_NUMBER
    }
}

jar {
    from "LICENSE.txt"
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    manifest {
        attributes(
                "Created-By": vendor,
                "Specification-Title": project.name,
                "Specification-Version": project.version,
                "Specification-Vendor": vendor,
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": vendor,
                "Main-Class": project.group + ".Main"
        )
    }
}

task sourcesJar(type: Jar) {
    from "LICENSE.txt"
    from sourceSets.main.allSource
    classifier = 'src'
}

artifacts {
    archives jar
    archives sourcesJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

